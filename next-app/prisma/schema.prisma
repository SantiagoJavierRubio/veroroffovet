generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Price {
  title     String   @id @unique @db.VarChar(255)
  value     Int
  updatedAt DateTime @default(now()) @updatedAt
}

model Education {
  id          String  @id @unique @default(cuid())
  type        String
  title       String
  institution String
  inCourse    Boolean @default(false)
}

model Barrio {
  name         String   @id @unique
  Distrito     Distrito @relation(fields: [distritoName], references: [name])
  distritoName String

  @@index([distritoName])
}

model Distrito {
  name   String   @id @unique
  Barrio Barrio[]
}


model Course {
  id          String @id @unique @default(cuid())
  name        String
  description String?
  image       String?
  attachment  String?
  url         String?
  enabled     Boolean @default(true)
}

// Auth management
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
  ADMIN
  CLIENT
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(CLIENT)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
